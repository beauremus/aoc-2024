name: Advent of Code Solution

on:
  push:
    paths:
      - 'day*/solve.sql'
  pull_request:
    paths:
      - 'day*/solve.sql'
  workflow_dispatch:
    inputs:
      day:
        description: 'Day of Advent of Code (1-25)'
        required: true
        default: '1'
      input_type:
        description: 'Input type (test/actual)'
        required: true
        default: 'test'

env:
  AOC_YEAR: 2024
  AOC_SESSION: ${{ secrets.AOC_SESSION_COOKIE }}

jobs:
  solve:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set Day
      id: set-day
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          DAY="${{ github.event.inputs.day }}"
        else
          # Extract day from changed file path
          # DAY=$(echo "${{ github.event.path }}" | grep -oE 'day\K\d+')
          DAY=$(echo "$filepath" | sed -E 's/.*day([0-9]+).*/\1/')
        fi
        
        # Pad single-digit days with zero
        FORMATTED_DAY=$(printf "%02d" $DAY)
        echo "day=$FORMATTED_DAY" >> $GITHUB_OUTPUT
    
    - name: Determine Input Type
      id: input-type
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "type=test" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "type=${{ github.event.inputs.input_type }}" >> $GITHUB_OUTPUT
        else
          echo "type=actual" >> $GITHUB_OUTPUT
        fi
    
    - name: Fetch Puzzle Input
      env:
        AOC_INPUT_TYPE: ${{ steps.input-type.outputs.type }}
        AOC_DAY: ${{ steps.set-day.outputs.day }}
      run: |
        # Create day directory if not exists
        mkdir -p day$AOC_DAY
        
        if [[ "$AOC_INPUT_TYPE" == "test" ]]; then
          # For test input, you can manually add or generate it
          echo "Test input placeholder for Day $AOC_DAY" > day$AOC_DAY/input.txt
        else
          # Fetch actual puzzle input
          curl -s 'https://adventofcode.com/'$AOC_YEAR'/day/'$(echo $AOC_DAY | sed 's/^0*//')/input \
            --cookie "session=$AOC_SESSION" \
            > day$AOC_DAY/input.txt
        fi
    
    - name: Install SQLite
      run: sudo apt-get update && sudo apt-get install -y sqlite3

    - name: Debug Workflow Context
      env:
        AOC_DAY: ${{ steps.set-day.outputs.day }}
      run: |
        echo "Working directory: $(pwd)"
        echo "Day directory contents:"
        ls -la day$AOC_DAY
        cat day$AOC_DAY/input.txt
        cat day$AOC_DAY/solve.sql || echo "solve.sql not found"
    
    - name: Solve Advent of Code Challenge
      env:
        AOC_INPUT_TYPE: ${{ steps.input-type.outputs.type }}
        AOC_DAY: ${{ steps.set-day.outputs.day }}
      run: |
        echo day$AOC_DAY
        cd day$AOC_DAY
        
        # Append input type to solution output for clarity
        echo "Running Day $AOC_DAY with $AOC_INPUT_TYPE input"
        echo "Running Day $AOC_DAY with $AOC_INPUT_TYPE input" > run_log.txt

        echo "Testing solve.sql existence"
        # Verify solve.sql exists
        if [ ! -f solve.sql ]; then
          echo "Error: solve.sql not found"
          exit 1
        fi


        # Create verbose run script
        echo ".mode csv
        .headers on
        .echo on
        .import input.txt input
        .read solve.sql
        .quit" > verbose_run.sql
        
        # Run with verbose output and capture all output
        sqlite3 -bail :memory: < verbose_run.sql || echo "SQLite script failed"
        
        # Check the exit status
        exit_status=$?
        echo "SQLite Exit Status: $exit_status"
        
        # Dump full error details
        if [ $exit_status -ne 0 ]; then
          echo "Detailed error investigation:"
          sqlite3 -bail :memory: < solve.sql || true
        fi


        # Use a separate SQL script to run the solution
        echo ".mode csv
        .import input.txt input
        .read solve.sql
        .quit" > run.sql
        
        echo "Running sqlite"
        # sqlite3 :memory: < run.sql >> run_log.txt 2>&1
        
        echo "Output"
        # cat run_log.txt
    
    - name: Upload Results
      uses: actions/upload-artifact@v3
      with:
        name: day${{ steps.set-day.outputs.day }}-${{ steps.input-type.outputs.type }}-results
        path: day${{ steps.set-day.outputs.day }}/run_log.txt
